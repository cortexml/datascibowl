!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.datascibowl.DataSciBowl {
        which_set: 'train',
        start: 0,
        stop: 25000,
        shuffle: True,
        center: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 1,
            axes: ['c', 0, 1, 'b'],
        },
        layers: [
            !obj:pylearn2.models.maxout.MaxoutConvC01B {
                layer_name: 'h0',
                pad: 0,
                num_channels: 48,
                num_pieces: 2,
                kernel_shape: [8, 8],
                pool_shape: [4, 4],
                pool_stride: [2, 2],
                irange: .005,
                max_kernel_norm: .9,
            },
            !obj:pylearn2.models.maxout.MaxoutConvC01B {
                layer_name: 'h1',
                pad: 3,
                num_channels: 48,
                num_pieces: 2,
                kernel_shape: [8, 8],
                pool_shape: [4, 4],
                pool_stride: [2, 2],
                irange: .005,
                max_kernel_norm: 1.9365,
            },
            !obj:pylearn2.models.maxout.MaxoutConvC01B {
                pad: 3,
                layer_name: 'h2',
                num_channels: 24,
                num_pieces: 4,
                kernel_shape: [5, 5],
                pool_shape: [2, 2],
                pool_stride: [2, 2],
                irange: .005,
                max_kernel_norm: 1.9365,
            },
            !obj:pylearn2.models.mlp.Softmax {
                max_col_norm: 1.9365,
                layer_name: 'y',
                n_classes: 121,
                irange: .005
            }
        ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset: {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.datascibowl.DataSciBowl {
                              which_set: 'train',
                              start: 25000,
                              stop:  30000,
                              shuffle: True,
                              center: True
                          }
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_nll",
            prop_decrease: 0.,
            N: 15
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001
        }
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_nll',
             save_path: "cnn_maxout_48px_02_best.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: 0.7
        }
    ]
}